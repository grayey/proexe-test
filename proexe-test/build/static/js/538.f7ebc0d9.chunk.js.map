{"version":3,"file":"static/js/538.f7ebc0d9.chunk.js","mappings":"gQAyLA,WAAeA,EAAAA,EAAAA,KATS,SAACC,GAErB,MAAO,CACHC,UAFWD,EAATE,QAQV,EA/KqB,SAACC,GAClB,IACQC,EADcD,EAAdF,UACAG,MACFC,GAA0BC,EAAAA,EAAAA,MAC1BC,GAAWC,EAAAA,EAAAA,MACjB,GAA8BC,EAAAA,EAAAA,UAAS,CACnCC,UAAS,EACTC,YAAW,IAFf,eAAOC,EAAP,KAAgBC,EAAhB,KAKA,GAAoCJ,EAAAA,EAAAA,UAAS,CACzCK,KAAI,EACJC,MAAK,IAFT,eAAOC,EAAP,KAAmBC,EAAnB,MAKAC,EAAAA,EAAAA,YAAU,WACNC,MACF,IAKF,IAAMA,EAAW,mCAAG,yFAChBN,GAAW,kBACJD,GADG,IAENF,UAAS,KAETU,EAAmBhB,EALP,SAORgB,EAASC,OAPD,gCAQoCC,EAAAA,EAAAA,cARpC,OAQFC,EARE,OASRH,EAAWG,EAAcC,KAAI,SAACtB,GAE3B,MAAO,CACHuB,GAF0CvB,EAAvCuB,GAECC,KAFsCxB,EAAnCwB,KAGPC,SAH0CzB,EAA7ByB,SAGHC,MAHgC1B,EAAnB0B,MAIvBC,KAJ0C3B,EAAZ4B,QAIjBD,SAdZ,OAkBZxB,GAAS0B,EAAAA,EAAAA,IAASX,IAlBN,kDAoBZY,QAAQC,MAAM,CAAEC,IAAG,OApBP,yBAsBZrB,GAAW,kBACJD,GADG,IAENF,UAAS,KAxBD,6EAAH,qDAiCXyB,EAAU,mCAAG,WAAMjC,GAAN,0FAELoB,EAAAA,EAAAA,WAAuBpB,GAFlB,sDAIX8B,QAAQC,MAAM,CAAEC,IAAG,OAJR,uBAMX7B,GAAS+B,EAAAA,EAAAA,IAAWlC,IANT,0EAAH,sDAqBhB,OACI,+BACA,iBAAKmC,UAAU,WAAf,WACI,iBAAKA,UAAU,uBAAf,WAEQ,mBAAQA,UAAU,4BAA4BC,QAAS,kBAAM/B,EAAS,eAAtE,sBAGJ,0BACG,4CAGP,gBAAK8B,UAAU,YAAf,UACA,gBAAKA,UAAU,mBAAf,UACJ,mBAAOA,UAAU,qCAAjB,WACQ,4BACI,2BACI,gCACA,kCACA,sCACA,iBAAKA,UAAU,YAAf,WACI,gBAAKA,UAAU,OAAOC,QAAS,WAC3BrB,EAAc,CACVH,KAAI,EACJC,MAAK,IAETV,GAASkC,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,YALvB,UAOA,cAAGH,UAAS,uBAAkBrB,EAAWF,IAAM,UAAU,SAEzD,gBAAKuB,UAAU,OAAQC,QAAS,WAC3BrB,EAAc,CACXH,KAAI,EACJC,MAAK,IAETV,GAASkC,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,aALvB,UAOJ,cAAGH,UAAS,wBAAmBrB,EAAWD,KAAO,UAAW,eAI5D,mCACA,kCACA,kCACA,yCAGR,2BAEKX,EAAMiB,OACJjB,EAAMoB,KAAI,SAACtB,EAAYuC,GAEtB,OACI,2BACA,0BAAKA,EAAM,EAAX,QACA,wBAAKvC,EAAKwB,QACV,wBAAKxB,EAAKyB,YACV,wBAAKzB,EAAK0B,SACV,wBAAK1B,EAAK2B,QACV,yBACI,mBAAQQ,UAAU,oCAAoCC,QAAS,kBAAM/B,EAAS,UAAD,OAAWL,EAAKuB,MAA7F,qBAIJ,yBAAI,mBAAQY,UAAU,wBAAwBC,QAAS,YA1EzD,SAACpC,GACnB,IAAMwC,EAAK,0CAAsCxC,EAAKwB,KAA3C,KACXiB,IAAAA,KAAUD,GAAOE,MAAK,SAACC,GAChBA,EAAOC,aACNX,EAAWjC,MAuEK6C,CAAc7C,IADd,wBAXKA,EAAKuB,QAiBf,yBACI,eAAIuB,QAAS,EAAGX,UAAU,cAA1B,mD,0JCtJzBY,EAAWC,aAejB,EAZkC,CAC9BC,YAAa,CACTC,WAAY,sEAEhBC,WAAY,CACRD,WAAY,sEAEhBE,KAAM,CACFF,WAAY,uEATgCH,EAAIM,QCSxD,EAhBsB,SAACrB,GACnB,IAAMsB,EAAatB,EAAbsB,SAYN,OAXKA,IACDA,EAAW,CACPC,KAAM,CACFC,QAAS,uCACTC,WAAYC,EAAAA,GAAAA,qBAIpBJ,EAASC,MAAQD,EAASC,KAAKxB,QAC/BuB,EAASC,KAAKC,QAAUF,EAASC,KAAKxB,OAEnCuB,GCVUK,GAAAA,EAAAA,EAAAA,IAAAA,SAAAA,IAAAA,IAAAA,EAAAA,MAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,KACTT,WAAqBU,EAAAA,WAAAA,KAQtBC,IAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAM,WAAOC,EAAavC,GAApB,8EACLwC,EADK,UACK,EAAKb,WADV,YACwBY,GACjCC,EAAQxC,EAAD,UAAgBwC,EAAhB,YAAwBxC,GAAlBwC,EAFJ,kBAGFC,IAAAA,IACED,GACJrB,MAAK,SAACY,GAAD,OAA6BA,EAASC,QAC3CU,OAAM,SAAClC,GACJ,MAAMmC,EAAcnC,GAAOwB,SAP1B,gGAANM,GAAM,KAiBNM,KAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAO,WAAOL,EAAaP,GAApB,8EACJQ,EADI,UACM,EAAKb,WADX,YACyBY,GADzB,kBAEHE,IAAAA,KACGD,EAAMR,GACXb,MAAK,SAACY,GAAD,OAA6BA,EAASC,QAC3CU,OAAM,SAAClC,GACJ,MAAMmC,EAAcnC,GAAOwB,SANzB,gGAAPY,GAAO,KAgBPC,IAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAM,WAAON,EAAaP,GAApB,8EACHQ,EADG,UACO,EAAKb,WADZ,YAC0BY,GAD1B,kBAEFE,IAAAA,IACED,EAAMR,GACVb,MAAK,SAACY,GAAD,OAA6BA,EAASC,QAC3CU,OAAM,SAAClC,GACJ,MAAMmC,EAAcnC,GAAOwB,SAN1B,gGAANa,GAAM,KAgBNC,MAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAQ,WAAOP,GAAP,4FAAoBP,EAApB,+BAA2B,KAChCQ,EADK,UACK,EAAKb,WADV,YACwBY,GADxB,kBAEJE,IAAAA,MACID,EAAMR,GACZb,MAAK,SAACY,GAAD,OAA6BA,EAASC,QAC3CU,OAAM,SAAClC,GACJ,MAAMmC,EAAcnC,GAAOwB,SANxB,8FAARc,GAAQ,KAeRC,IAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAM,WAAOR,GAAP,8EACHC,EADG,UACO,EAAKb,WADZ,YAC0BY,GAD1B,kBAEFE,IAAAA,OACKD,GACPrB,MAAK,SAACY,GAAD,OAA6BA,EAASC,QAC3CU,OAAM,SAAClC,GACJ,MAAMmC,EAAcnC,GAAOwB,SAN1B,8FAANe,MC3ELC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAAA,IAAAA,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,UAAAA,GA+BkB,OA/BlBA,EAAAA,EAAAA,KAAAA,MAAAA,EAAAA,CAAAA,MAAAA,OAAAA,KACMC,UAAY,OAAO,EAMpBvD,aAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAc,uGAA0B,EAAK4C,IAAI,EAAKW,YAAxC,6CAMXC,YAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAc,WAAOlD,GAAP,0FAAmC,EAAKsC,IAAI,EAAKW,UAAWjD,IAA5D,8FAAdkD,GAAc,EAMjBC,WAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAa,WAAO1E,GAAP,0FAAqC,EAAKmE,KAAK,EAAKK,UAAWxE,IAA/D,8FAAb0E,GAAa,EAMVC,WAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAa,WAAO3E,GAAP,0FAAqC,EAAKoE,IAAL,UAAY,EAAKI,UAAjB,YAA8BxE,EAAKuB,IAAMvB,IAA9E,8FAAb2E,GAAa,EAMhB1C,WAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAa,WAAOjC,GAAP,0FAAqC,EAAKsE,IAAL,UAAY,EAAKE,UAAjB,YAA8BxE,EAAKuB,MAAxE,8FAAbU,GAAa,mBA/BlBsC,CAAoBZ,GAkC1B,MAAmBY,G,oKCjCN1C,EAAW,SAAC3B,GAAD,MAAoB,CACxC0E,KAAMC,EAAAA,GACNC,QAAQ5E,IAGC6E,EAAU,SAAC/E,GAAD,MAAiB,CACpC4E,KAAMC,EAAAA,GACNC,QAAQ9E,IAGG2E,EAAa,SAAC3E,GAAD,MAAiB,CACzC4E,KAAMC,EAAAA,GACNC,QAAQ9E,IAGCkC,EAAa,SAAClC,GAAD,MAAiB,CACvC4E,KAAMC,EAAAA,GACNC,QAAQ9E,IAGCqC,EAAY,SAAC2C,GAAD,IAAoDC,EAApD,uDAA2D,WAA3D,MAA2E,CAChGL,KAAMI,EACNF,QAAQG","sources":["app/views/user/userOverview.tsx","environment/index.ts","utils/errorHandler.ts","services/apiHandlerService.ts","services/userService.ts","store/actions/userActions.ts"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { removeUser,  setUsers, sortUsers } from \"../../../store/actions/userActions\";\nimport { Dispatch } from \"redux\"\nimport { connect, useDispatch } from 'react-redux'\nimport { IUser, IUserResponse } from \"../../../interfaces/userInterface\";\nimport userService from \"../../../services/userService\";\nimport swal from \"sweetalert2\";\nimport { useNavigate } from \"react-router\";\nimport { SortTypes } from \"../../../utils/enums\";\n\nconst UserOverview = (props:any) =>{\n    const { userProps } = props;\n    const { users } = userProps;\n    const dispatch: Dispatch<any> = useDispatch();\n    const navigate = useNavigate();\n    const [loaders, setLoaders] = useState({\n        fetching:false,\n        processing:false\n    });\n\n    const [sortAction, setSortAction] = useState({\n        ASC:false,\n        DESC:false\n    })\n\n    useEffect(()=>{\n        getAllUsers();\n    },[])\n\n    /**\n     * This method retrieves users and updates the store\n     */\n    const getAllUsers = async () =>{\n        setLoaders({\n            ...loaders,\n            fetching:true\n        });\n        let allUsers:IUser[] = users;\n        try{\n            if(!allUsers.length){// app was reloaded onto the users page\n                const usersResponse:IUserResponse[] = await userService.getAllUsers();\n                allUsers = usersResponse.map((user:IUserResponse):IUser =>{\n                   const {id, name, username, email, address } = user;\n                   return {\n                       id, name,\n                       username, email, \n                       city:address.city\n                   }\n               });\n            }\n            dispatch(setUsers(allUsers));\n        }catch(err){\n            console.error({ err })\n        }finally{\n            setLoaders({\n                ...loaders,\n                fetching:false\n            });\n        }\n    }\n\n    /**\n     * This method deletes a user and updates the store\n     * @param user \n     */\n    const deleteUser = async(user:IUser) =>{\n        try{\n            await userService.deleteUser(user);\n        }catch(err){// wiil throw a 404 for new users\n            console.error({ err })\n        }finally{//remove anyway\n            dispatch(removeUser(user));\n        }\n    }\n\n\n    const confirmDelete = (user:IUser) =>{\n        const title = `Are you sure you want to delete ${user.name}?`;\n        swal.fire(title).then((result:any) =>{\n            if(result.isConfirmed){\n                deleteUser(user);\n            }\n          })\n\n    }\n    \n    return (\n        <>\n        <div className=\"card p-3\">\n            <div className=\"card-header bg-light\">\n    \n                    <button className=\"float-end btn btn-primary\" onClick={() => navigate('/users/add')}>\n                        Add new\n                    </button>\n                <div>\n                   <b> User list</b>\n                </div>\n            </div>\n            <div className=\"card-body\">\n            <div className=\"table-responsive\">\n        <table className=\"table table-bordered table-striped\">\n                <thead>\n                    <tr>\n                        <th>Id</th>\n                        <th>Name</th>\n                        <th>Username\n                        <div className=\"float-end\">\n                            <div className='sort' onClick={()=>{\n                                setSortAction({\n                                    ASC:true,\n                                    DESC:false\n                                })\n                                dispatch(sortUsers(SortTypes.SORT_ASC));\n                            }}>\n                            <i className={`icon-sort-asc${sortAction.ASC ? ' active':''}`}></i>\n                            </div>\n                            <div className='sort'  onClick={()=>{\n                                 setSortAction({\n                                    ASC:false,\n                                    DESC:true\n                                })\n                                dispatch(sortUsers(SortTypes.SORT_DESC));\n                            }}> \n                        <i className={`icon-sort-desc${sortAction.DESC ? ' active' :''}`}></i>\n                            </div>\n                        </div>\n                        </th>\n                        <th>Email</th>\n                        <th>City</th>\n                        <th>Edit</th>\n                        <th>Delete</th>\n                    </tr>\n                </thead>\n                <tbody>\n                 {\n                     users.length ?\n                       users.map((user:IUser, index:number)=>{\n                       \n                        return (\n                            <tr key={user.id}>\n                            <td>{index+1}.</td>\n                            <td>{user.name}</td>\n                            <td>{user.username}</td>\n                            <td>{user.email}</td>\n                            <td>{user.city}</td>\n                            <td>\n                                <button className=\"btn btn-sm btn-warning text-white\" onClick={() => navigate(`/users/${user.id}`)}>\n                                 edit\n                                </button>\n                            </td>\n                            <td><button className=\"btn btn-sm btn-danger\" onClick={()=>{\n                                confirmDelete(user);\n                            }}>delete</button></td>\n                        </tr>\n                        )\n                       }): (\n                           <tr>\n                               <td colSpan={8} className='text-center'>\n                                    No records found.\n                               </td>\n                           </tr>\n                       )\n                   }\n                </tbody>\n\n            </table>\n       \n        </div>\n        </div>\n            </div>\n      \n      \n        </>\n    )\n\n}\nconst mapStateToProps = (state:any) => {\n  const { user } = state\n    return {\n        userProps:user\n    }\n}\n\n\n\nexport default connect(mapStateToProps)(UserOverview)\n","import { IEnvironment } from '../interfaces/environmentInterface';\nimport { EnvironmentTypes } from '../utils/enums';\n\ntype Development = EnvironmentTypes.development;\ntype Test = EnvironmentTypes.test;\ntype Production = EnvironmentTypes.production;\n\nconst env: any = process.env.NODE_ENV;\n\nconst mode: Development | Test | Production = env ? env.trim() : EnvironmentTypes.development;\nconst environment: IEnvironment = {\n    development: {\n        apiBaseUrl: 'https://my-json-server.typicode.com/karolkproexe/jsonplaceholderdb',\n    },\n    production: {\n        apiBaseUrl: 'https://my-json-server.typicode.com/karolkproexe/jsonplaceholderdb',\n    },\n    test: {\n        apiBaseUrl: 'https://my-json-server.typicode.com/karolkproexe/jsonplaceholderdb',\n    },\n};\n\nexport default environment[mode];\n","import { ApiError } from './enums';\n\nconst errrorHandler = (err: any): any => {\n    let { response } = err;\n    if (!response) {\n        response = {\n            data: {\n                message: 'Server unvailable, please try again.',\n                statusCode: ApiError.serverUnavailable,\n            },\n        };\n    }\n    if (response.data && response.data.error) {\n        response.data.message = response.data.error;\n    }\n    return response;\n};\n\nexport default errrorHandler;\n","import axios, { AxiosError, AxiosResponse } from 'axios';\nimport environment from '../environment';\nimport { IApiHandler } from '../interfaces/apiInterface';\nimport errrorHandler from '../utils/errorHandler';\n\nexport default class ApiHandlerService implements IApiHandler {\n    private apiBaseUrl: string = environment.apiBaseUrl;\n\n    /**\n     * This method retrieves records\n     * @param url\n     * @param id\n     * @returns\n     */\n    public get = async (url: string, id?:string): Promise<any> => {\n        let path = `${this.apiBaseUrl}/${url}`;\n        path = !id ? path : `${path}/${id}`;\n        return axios\n            .get(path)\n            .then((response: AxiosResponse) => response.data)\n            .catch((error: AxiosError) => {\n                throw errrorHandler(error).data;\n            });\n    };\n\n    /**\n     * This method is mainly used to create a new record\n     * @param url\n     * @param data\n     * @returns\n     */\n    public post = async (url: string, data: object): Promise<any> => {\n        const path = `${this.apiBaseUrl}/${url}`;\n        return axios\n            .post(path, data)\n            .then((response: AxiosResponse) => response.data)\n            .catch((error: AxiosError) => {\n                throw errrorHandler(error).data;\n            });\n    };\n\n    /**\n     * This method is used to update a record\n     * @param url\n     * @param data\n     * @returns\n     */\n    public put = async (url: string, data?:any): Promise<any> => {\n        const path = `${this.apiBaseUrl}/${url}`;\n        return axios\n            .put(path, data)\n            .then((response: AxiosResponse) => response.data)\n            .catch((error: AxiosError) => {\n                throw errrorHandler(error).data;\n            });\n    };\n\n    /**\n     * This method is used for patch updates\n     * @param url\n     * @param data\n     * @returns\n     */\n    public patch = async (url: string, data = null): Promise<any> => {\n        const path = `${this.apiBaseUrl}/${url}`;\n        return axios\n            .patch(path, data)\n            .then((response: AxiosResponse) => response.data)\n            .catch((error: AxiosError) => {\n                throw errrorHandler(error).data;\n            });\n    };\n\n    /**\n     * This method is used to delete a record\n     * @param url\n     * @returns\n     */\n    public del = async (url: string): Promise<any> => {\n        const path = `${this.apiBaseUrl}/${url}`;\n        return axios\n            .delete(path)\n            .then((response: AxiosResponse) => response.data)\n            .catch((error: AxiosError) => {\n                throw errrorHandler(error).data;\n            });\n    };\n\n   \n}\n","import { IUser } from '../interfaces/userInterface';\nimport ApiHandlerService from './apiHandlerService';\n\nclass UserService extends ApiHandlerService {\n    private entityUrl = 'data';\n\n    /**\n     * This method returns a list of users\n     * @returns promise\n     */\n    public getAllUsers = async (): Promise<any> => this.get(this.entityUrl);\n\n      /**\n     * This method retrieves a user by their ID\n     * @returns promise\n     */\n       public getUserById = async (id:string): Promise<any> => this.get(this.entityUrl, id);\n\n    /**\n     * This method creates a new user\n     * @returns promise\n     */\n    public createUser = async (user: IUser): Promise<any> => this.post(this.entityUrl, user);\n\n      /**\n     * This method updates an existing user\n     * @returns promise\n     */\n       public updateUser = async (user: IUser): Promise<any> => this.put(`${this.entityUrl}/${user.id}`, user);\n\n    /**\n     * This method deletes a user\n     * @returns promise\n     */\n    public deleteUser = async (user: IUser): Promise<any> => this.del(`${this.entityUrl}/${user.id}`);\n}\n\nexport default new UserService();\n","import { IUser } from \"../../interfaces/userInterface\";\nimport { SortTypes } from \"../../utils/enums\";\nimport * as actionTypes from \"../actionTypes/userActionTypes\";\n\nexport const setUsers = (users:IUser[]) => ({\n    type: actionTypes.SET_USERS,\n    payload:users,\n  });\n\nexport const addUser = (user:IUser) => ({\n    type: actionTypes.ADD_USER,\n    payload:user,\n  });\n\n  export const updateUser = (user:IUser) => ({\n    type: actionTypes.UPDATE_USER,\n    payload:user,\n  });\n\nexport const removeUser = (user:IUser) => ({\n    type: actionTypes.REMOVE_USER,\n    payload:user,\n});\n\nexport const sortUsers = (sortType:SortTypes.SORT_DESC | SortTypes.SORT_ASC, column='username') => ({\n    type: sortType,\n    payload:column,\n});\n\n"],"names":["connect","state","userProps","user","props","users","dispatch","useDispatch","navigate","useNavigate","useState","fetching","processing","loaders","setLoaders","ASC","DESC","sortAction","setSortAction","useEffect","getAllUsers","allUsers","length","userService","usersResponse","map","id","name","username","email","city","address","setUsers","console","error","err","deleteUser","removeUser","className","onClick","sortUsers","SortTypes","index","title","swal","then","result","isConfirmed","confirmDelete","colSpan","env","process","development","apiBaseUrl","production","test","trim","response","data","message","statusCode","ApiError","ApiHandlerService","environment","get","url","path","axios","catch","errrorHandler","post","put","patch","del","UserService","entityUrl","getUserById","createUser","updateUser","type","actionTypes","payload","addUser","sortType","column"],"sourceRoot":""}