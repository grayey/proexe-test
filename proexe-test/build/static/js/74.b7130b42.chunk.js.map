{"version":3,"file":"static/js/74.b7130b42.chunk.js","mappings":"2QAWMA,EAAgB,CAClBC,KAAK,GACLC,MAAM,GACNC,SAAS,GACTC,KAAK,IAGHC,EAAmBC,EAAAA,KAAaC,MAAM,CACxCN,KAAMK,EAAAA,KAAaE,SAAS,oBAC5BL,SAAUG,EAAAA,KAAaE,SAAS,wBAChCN,MAAOI,EAAAA,KAAaJ,MAAM,uBAAuBM,SAAS,qBAC1DJ,KAAME,EAAAA,KAAaE,SAAS,sBAiL9B,WAAeC,EAAAA,EAAAA,KATO,SAACC,GAEnB,MAAO,CACHC,UAFWD,EAATE,QAQV,EA5Kc,SAACC,GACb,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAyBC,EAAAA,EAAAA,MAEvBC,EADcL,EAAdF,UACAO,MAER,GAA8BC,EAAAA,EAAAA,UAAS,CACnCC,UAAS,EACTC,YAAW,IAFf,eAAOC,EAAP,KAAgBC,EAAhB,KAIA,GAAsCJ,EAAAA,EAAAA,UAASnB,GAA/C,eAAOwB,EAAP,KAAoBC,EAApB,KAMMC,EAAmB,SAACC,GACtB,MAAwBA,EAAMC,OAAtB3B,EAAR,EAAQA,KAAM4B,EAAd,EAAcA,MACdJ,GAAe,kBACRD,GADO,cAETvB,EAAM4B,MAITC,EAAgB,mCAAG,6FACrBP,GAAW,kBACJD,GADG,IAEND,YAAW,KAETU,EAAgBP,EAChBQ,EAAWd,EAAMA,EAAMe,OAAS,GACtCF,EAAQG,GAAKF,IAAaA,EAASE,GAAK,GAAGC,WAAc,IAAIA,WAPxC,kBASXC,EAAAA,EAAAA,WAAuBZ,GATZ,OAUjBR,GAASqB,EAAAA,EAAAA,IAAQN,IACjBjB,EAAS,UAXQ,kDAajBwB,QAAQC,MAAM,CAAEC,IAAG,OAbF,yBAejBjB,GAAW,kBACJD,GADG,IAEND,YAAW,KAjBE,6EAAH,qDAsBtB,OACI,+BACA,gBAAKoB,UAAU,OAAf,UACA,SAAC,KAAD,CACYzC,cAAewB,EACfkB,iBAAkBrC,EAClBsC,SAAUb,EAHtB,SAKa,YAOM,IANHc,EAME,EANFA,OACAC,EAKE,EALFA,QACAC,EAIE,EAJFA,aACAC,EAGE,EAHFA,WACAC,EAEE,EAFFA,aACAC,EACE,EADFA,OAEA,OAChB,kBAAMR,UAAU,mBAAmBE,SAAUK,EAAcE,YAAU,EAArE,WACI,gBAAKT,UAAU,cAAf,UACI,4CAEJ,gBAAKA,UAAU,YAAf,UACI,iBAAKA,UAAU,sBAAf,WACI,iBAAKA,UAAU,MAAf,WAEA,mBAAOU,QAAQ,UAAf,kBACQ,iBAAMV,UAAU,cAAhB,mBAGJ,kBAAOP,GAAG,UACVkB,OAAQL,EACRM,SAAU,SAAC1B,GACPD,EAAiBC,GACjBmB,EAAanB,IACd2B,KAAK,OAAOrD,KAAK,OAAO4B,MAAOoB,EAAOhD,KAAMwC,UAAS,uBAAkBI,EAAQ5C,MAAQ2C,EAAO3C,MAAQ,gBAEzG,kBAAOwC,UAAU,cAAjB,SACCI,EAAQ5C,MAAQ2C,EAAO3C,QAGZ,uBAGhB,iBAAKwC,UAAU,MAAf,WAEA,mBAAOU,QAAQ,cAAf,sBACY,iBAAMV,UAAU,cAAhB,mBAER,kBAAOP,GAAG,cAAcoB,KAAK,OAC7BF,OAAQL,EAERM,SAAU,SAAC1B,GACPD,EAAiBC,GACjBmB,EAAanB,IACd1B,KAAK,WAAW4B,MAAOoB,EAAO9C,SAAUsC,UAAS,uBAAkBI,EAAQ1C,UAAYyC,EAAOzC,UAAY,gBACnH,kBAAOsC,UAAU,cAAjB,SACOI,EAAQ1C,UAAYyC,EAAOzC,eAIhC,iBAAKsC,UAAU,MAAf,WACA,mBAAOU,QAAQ,WAAf,mBACS,iBAAMV,UAAU,cAAhB,mBAEL,kBAAOP,GAAG,WAAWoB,KAAK,OAC1BF,OAAQL,EACRM,SAAU,SAAC1B,GACPD,EAAiBC,GACjBmB,EAAanB,IACd1B,KAAK,QAAQ4B,MAAOoB,EAAO/C,MAAOuC,UAAS,uBAAkBI,EAAQ3C,OAAS0C,EAAO1C,OAAS,gBACvG,kBAAOuC,UAAU,cAAjB,SACOI,EAAQ3C,OAAS0C,EAAO1C,YAI7B,iBAAKuC,UAAU,MAAf,WAEA,mBAAOU,QAAQ,UAAf,kBACQ,iBAAMV,UAAU,cAAhB,mBAEJ,kBAAOP,GAAG,UAAUoB,KAAK,OACzBF,OAAQL,EAERM,SAAU,SAAC1B,GACPD,EAAiBC,GACjBmB,EAAanB,IACd1B,KAAK,OAAO4B,MAAOoB,EAAO7C,KAAMqC,UAAS,uBAAkBI,EAAQzC,MAAQwC,EAAOxC,MAAQ,gBACpG,kBAAOqC,UAAU,cAAjB,SACQI,EAAQzC,MAAQwC,EAAOxC,gBAMpC,gBAAKqC,UAAU,cAAf,UACI,iBAAKA,UAAU,YAAf,WACA,mBAAQA,UAAU,6BAA6Bc,QAAS,kBAAKzC,EAAS,WAAtE,qBACA,oBAAQ2B,UAAS,kBAAae,EAAAA,GAAmBZ,EAAQC,GAAW,UAAW,WAAcS,KAAK,SAASG,SAAUnC,EAAQD,WAA7H,mBAEQC,EAAQD,aACJ,cAAGoB,UAAU,kC,0JCtKnCiB,EAAWC,aAejB,EAZkC,CAC9BC,YAAa,CACTC,WAAY,sEAEhBC,WAAY,CACRD,WAAY,sEAEhBE,KAAM,CACFF,WAAY,uEATgCH,EAAIM,QCSxD,EAhBsB,SAACxB,GACnB,IAAMyB,EAAazB,EAAbyB,SAYN,OAXKA,IACDA,EAAW,CACPC,KAAM,CACFC,QAAS,uCACTC,WAAYC,EAAAA,GAAAA,qBAIpBJ,EAASC,MAAQD,EAASC,KAAK3B,QAC/B0B,EAASC,KAAKC,QAAUF,EAASC,KAAK3B,OAEnC0B,GCVUK,GAAAA,EAAAA,EAAAA,IAAAA,SAAAA,IAAAA,IAAAA,EAAAA,MAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,KACTT,WAAqBU,EAAAA,WAAAA,KAQtBC,IAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAM,WAAOC,EAAavC,GAApB,8EACLwC,EADK,UACK,EAAKb,WADV,YACwBY,GACjCC,EAAQxC,EAAD,UAAgBwC,EAAhB,YAAwBxC,GAAlBwC,EAFJ,kBAGFC,IAAAA,IACED,GACJE,MAAK,SAACX,GAAD,OAA6BA,EAASC,QAC3CW,OAAM,SAACtC,GACJ,MAAMuC,EAAcvC,GAAO2B,SAP1B,gGAANM,GAAM,KAiBNO,KAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAO,WAAON,EAAaP,GAApB,8EACJQ,EADI,UACM,EAAKb,WADX,YACyBY,GADzB,kBAEHE,IAAAA,KACGD,EAAMR,GACXU,MAAK,SAACX,GAAD,OAA6BA,EAASC,QAC3CW,OAAM,SAACtC,GACJ,MAAMuC,EAAcvC,GAAO2B,SANzB,gGAAPa,GAAO,KAgBPC,IAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAM,WAAOP,EAAaP,GAApB,8EACHQ,EADG,UACO,EAAKb,WADZ,YAC0BY,GAD1B,kBAEFE,IAAAA,IACED,EAAMR,GACVU,MAAK,SAACX,GAAD,OAA6BA,EAASC,QAC3CW,OAAM,SAACtC,GACJ,MAAMuC,EAAcvC,GAAO2B,SAN1B,gGAANc,GAAM,KAgBNC,MAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAQ,WAAOR,GAAP,4FAAoBP,EAApB,+BAA2B,KAChCQ,EADK,UACK,EAAKb,WADV,YACwBY,GADxB,kBAEJE,IAAAA,MACID,EAAMR,GACZU,MAAK,SAACX,GAAD,OAA6BA,EAASC,QAC3CW,OAAM,SAACtC,GACJ,MAAMuC,EAAcvC,GAAO2B,SANxB,8FAARe,GAAQ,KAeRC,IAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAM,WAAOT,GAAP,8EACHC,EADG,UACO,EAAKb,WADZ,YAC0BY,GAD1B,kBAEFE,IAAAA,OACKD,GACPE,MAAK,SAACX,GAAD,OAA6BA,EAASC,QAC3CW,OAAM,SAACtC,GACJ,MAAMuC,EAAcvC,GAAO2B,SAN1B,8FAANgB,MC3ELC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAAA,IAAAA,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,UAAAA,GA+BkB,OA/BlBA,EAAAA,EAAAA,KAAAA,MAAAA,EAAAA,CAAAA,MAAAA,OAAAA,KACMC,UAAY,OAAO,EAMpBC,aAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAc,uGAA0B,EAAKb,IAAI,EAAKY,YAAxC,6CAMXE,YAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAc,WAAOpD,GAAP,0FAAmC,EAAKsC,IAAI,EAAKY,UAAWlD,IAA5D,8FAAdoD,GAAc,EAMjBC,WAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAa,WAAO3E,GAAP,0FAAqC,EAAKmE,KAAK,EAAKK,UAAWxE,IAA/D,8FAAb2E,GAAa,EAMVC,WAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAa,WAAO5E,GAAP,0FAAqC,EAAKoE,IAAL,UAAY,EAAKI,UAAjB,YAA8BxE,EAAKsB,IAAMtB,IAA9E,8FAAb4E,GAAa,EAMhBC,WAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAa,WAAO7E,GAAP,0FAAqC,EAAKsE,IAAL,UAAY,EAAKE,UAAjB,YAA8BxE,EAAKsB,MAAxE,8FAAbuD,GAAa,mBA/BlBN,CAAoBb,GAkC1B,MAAmBa,G,oKCjCNO,EAAW,SAACxE,GAAD,MAAoB,CACxCoC,KAAMqC,EAAAA,GACNC,QAAQ1E,IAGCmB,EAAU,SAACzB,GAAD,MAAiB,CACpC0C,KAAMqC,EAAAA,GACNC,QAAQhF,IAGG4E,EAAa,SAAC5E,GAAD,MAAiB,CACzC0C,KAAMqC,EAAAA,GACNC,QAAQhF,IAGCiF,EAAa,SAACjF,GAAD,MAAiB,CACvC0C,KAAMqC,EAAAA,GACNC,QAAQhF,IAGCkF,EAAY,SAACC,GAAD,IAAoDC,EAApD,uDAA2D,WAA3D,MAA2E,CAChG1C,KAAMyC,EACNH,QAAQI","sources":["app/views/user/addUser.tsx","environment/index.ts","utils/errorHandler.ts","services/apiHandlerService.ts","services/userService.ts","store/actions/userActions.ts"],"sourcesContent":["import React, {  useState } from \"react\";\nimport { addUser } from \"../../../store/actions/userActions\";\nimport { connect, useDispatch } from 'react-redux'\nimport { Dispatch } from \"redux\"\nimport { useNavigate } from \"react-router\";\nimport userService from \"../../../services/userService\";\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\";\nimport * as utils from '../../../utils/formatters';\nimport { IUser } from \"../../../interfaces/userInterface\";\n\nconst initialValues = {\n    name:'',\n    email:'',\n    username:'',\n    city:''\n};\n\nconst createUserSchema = yup.object().shape({\n    name: yup.string().required(\"Name is required\"),\n    username: yup.string().required(\"Username is required\"),\n    email: yup.string().email('Enter a valid email').required(\"Email is required\"),\n    city: yup.string().required(\"City is required\"),\n    });\n\n\n\nconst AddUser = (props:any) => {\n    const navigate = useNavigate();\n    const dispatch:Dispatch<any> = useDispatch();\n    const { userProps } = props;\n    const { users } = userProps;\n\n    const [loaders, setLoaders] = useState({\n        fetching:false,\n        processing:false\n    });\n    const [addUserForm, setAddUserForm] = useState(initialValues);\n\n    /**\n     * this method handles form changes\n     * @param event \n     */\n    const handleFormChange = (event:any) =>{\n        const { name, value } = event.target;\n        setAddUserForm({\n            ...addUserForm,\n            [name]:value\n        });\n    }\n\n    const submitCreateForm = async() =>{\n        setLoaders({\n            ...loaders,\n            processing:true\n        });\n        const newUser:IUser = addUserForm;\n        const lastUser = users[users.length - 1];\n        newUser.id = lastUser ? (+lastUser.id + 1).toString() : (11).toString();\n        try{\n            await userService.createUser(addUserForm);//without ID\n            dispatch(addUser(newUser)); // withID\n            navigate('/users');\n        }catch(err){\n            console.error({ err });\n        }finally{\n            setLoaders({\n                ...loaders,\n                processing:false\n            });\n        }\n    }\n\n    return (\n        <>\n        <div className=\"card\">\n        <Formik\n                    initialValues={addUserForm}\n                    validationSchema={createUserSchema}\n                    onSubmit={submitCreateForm}\n                    >\n                    {({\n                        errors,\n                        touched,\n                        handleChange,\n                        handleBlur,\n                        handleSubmit,\n                        values\n                    }) => {\n                        return (\n        <form className='needs-validation' onSubmit={handleSubmit} noValidate>\n            <div className=\"card-header\">\n                <b>Add user form</b>\n            </div>\n            <div className=\"card-body\">\n                <div className=\"row gy-4 row-cols-1\">\n                    <div className=\"col\">\n        \n                    <label htmlFor=\"addName\">\n                        Name<span className='text-danger'>*</span>\n                    </label>\n\n                        <input id=\"addName\" \n                        onBlur={handleBlur}\n                        onChange={(event)=>{\n                            handleFormChange(event);\n                            handleChange(event);\n                        }} type=\"text\" name=\"name\" value={values.name} className={`form-control ${touched.name && errors.name && 'has-error'}`} />\n                        \n                        <small className='text-danger'>\n                        {touched.name && errors.name}\n                        </small>\n                    \n                                    <div>\n                  </div>\n                    </div>\n                    <div className=\"col\">\n         \n                    <label htmlFor=\"addUsername\">\n                        Username<span className='text-danger'>*</span>\n                    </label>\n                        <input id='addUsername' type=\"text\"\n                        onBlur={handleBlur}\n                        \n                        onChange={(event)=>{\n                            handleFormChange(event);\n                            handleChange(event);\n                        }} name=\"username\" value={values.username} className={`form-control ${touched.username && errors.username && 'has-error'}`} />\n                  <small className='text-danger'>\n                        {touched.username && errors.username}\n                        </small>\n                    \n                    </div>\n                    <div className=\"col\">\n                    <label htmlFor=\"addEmail\">\n                        Email<span className='text-danger'>*</span>\n                    </label>\n                        <input id='addEmail' type=\"text\" \n                        onBlur={handleBlur}\n                        onChange={(event)=>{\n                            handleFormChange(event);\n                            handleChange(event);\n                        }} name=\"email\" value={values.email} className={`form-control ${touched.email && errors.email && 'has-error'}`} />\n                  <small className='text-danger'>\n                        {touched.email && errors.email}\n                        </small>\n                    </div>\n                    \n                    <div className=\"col\">\n    \n                    <label htmlFor=\"addCity\">\n                        City<span className='text-danger'>*</span>\n                    </label>\n                        <input id='addCity' type=\"text\"\n                        onBlur={handleBlur}\n                        \n                        onChange={(event)=>{\n                            handleFormChange(event);\n                            handleChange(event);\n                        }} name=\"city\" value={values.city} className={`form-control ${touched.city && errors.city && 'has-error'}`} />\n                 <small className='text-danger'>\n                        {touched.city && errors.city}\n                        </small>\n                \n                    </div>\n                </div>\n            </div>\n            <div className=\"card-footer\">\n                <div className='float-end'>\n                <button className='btn btn-outline-danger m-2' onClick={()=> navigate('/users')}>Cancel</button>\n                <button className={`btn btn-${utils.checkIsValid(errors, touched) ? 'success' :'primary'}`}  type='submit' disabled={loaders.processing}>Submit\n                {\n                        loaders.processing && (\n                            <i className=\"spinner\"></i>\n                        )\n                    }\n                </button>\n                </div>\n         \n            </div>\n            </form>\n              );\n            }}\n            </Formik>\n        </div>\n        </>\n    )\n}\n\n\nconst mapStateToProps = (state:any) => {\n    const { user } = state\n      return {\n          userProps:user\n      }\n  }\n  \n  \n  \n  export default connect(mapStateToProps)(AddUser)","import { IEnvironment } from '../interfaces/environmentInterface';\nimport { EnvironmentTypes } from '../utils/enums';\n\ntype Development = EnvironmentTypes.development;\ntype Test = EnvironmentTypes.test;\ntype Production = EnvironmentTypes.production;\n\nconst env: any = process.env.NODE_ENV;\n\nconst mode: Development | Test | Production = env ? env.trim() : EnvironmentTypes.development;\nconst environment: IEnvironment = {\n    development: {\n        apiBaseUrl: 'https://my-json-server.typicode.com/karolkproexe/jsonplaceholderdb',\n    },\n    production: {\n        apiBaseUrl: 'https://my-json-server.typicode.com/karolkproexe/jsonplaceholderdb',\n    },\n    test: {\n        apiBaseUrl: 'https://my-json-server.typicode.com/karolkproexe/jsonplaceholderdb',\n    },\n};\n\nexport default environment[mode];\n","import { ApiError } from './enums';\n\nconst errrorHandler = (err: any): any => {\n    let { response } = err;\n    if (!response) {\n        response = {\n            data: {\n                message: 'Server unvailable, please try again.',\n                statusCode: ApiError.serverUnavailable,\n            },\n        };\n    }\n    if (response.data && response.data.error) {\n        response.data.message = response.data.error;\n    }\n    return response;\n};\n\nexport default errrorHandler;\n","import axios, { AxiosError, AxiosResponse } from 'axios';\nimport environment from '../environment';\nimport { IApiHandler } from '../interfaces/apiInterface';\nimport errrorHandler from '../utils/errorHandler';\n\nexport default class ApiHandlerService implements IApiHandler {\n    private apiBaseUrl: string = environment.apiBaseUrl;\n\n    /**\n     * This method retrieves records\n     * @param url\n     * @param id\n     * @returns\n     */\n    public get = async (url: string, id?:string): Promise<any> => {\n        let path = `${this.apiBaseUrl}/${url}`;\n        path = !id ? path : `${path}/${id}`;\n        return axios\n            .get(path)\n            .then((response: AxiosResponse) => response.data)\n            .catch((error: AxiosError) => {\n                throw errrorHandler(error).data;\n            });\n    };\n\n    /**\n     * This method is mainly used to create a new record\n     * @param url\n     * @param data\n     * @returns\n     */\n    public post = async (url: string, data: object): Promise<any> => {\n        const path = `${this.apiBaseUrl}/${url}`;\n        return axios\n            .post(path, data)\n            .then((response: AxiosResponse) => response.data)\n            .catch((error: AxiosError) => {\n                throw errrorHandler(error).data;\n            });\n    };\n\n    /**\n     * This method is used to update a record\n     * @param url\n     * @param data\n     * @returns\n     */\n    public put = async (url: string, data?:any): Promise<any> => {\n        const path = `${this.apiBaseUrl}/${url}`;\n        return axios\n            .put(path, data)\n            .then((response: AxiosResponse) => response.data)\n            .catch((error: AxiosError) => {\n                throw errrorHandler(error).data;\n            });\n    };\n\n    /**\n     * This method is used for patch updates\n     * @param url\n     * @param data\n     * @returns\n     */\n    public patch = async (url: string, data = null): Promise<any> => {\n        const path = `${this.apiBaseUrl}/${url}`;\n        return axios\n            .patch(path, data)\n            .then((response: AxiosResponse) => response.data)\n            .catch((error: AxiosError) => {\n                throw errrorHandler(error).data;\n            });\n    };\n\n    /**\n     * This method is used to delete a record\n     * @param url\n     * @returns\n     */\n    public del = async (url: string): Promise<any> => {\n        const path = `${this.apiBaseUrl}/${url}`;\n        return axios\n            .delete(path)\n            .then((response: AxiosResponse) => response.data)\n            .catch((error: AxiosError) => {\n                throw errrorHandler(error).data;\n            });\n    };\n\n   \n}\n","import { IUser } from '../interfaces/userInterface';\nimport ApiHandlerService from './apiHandlerService';\n\nclass UserService extends ApiHandlerService {\n    private entityUrl = 'data';\n\n    /**\n     * This method returns a list of users\n     * @returns promise\n     */\n    public getAllUsers = async (): Promise<any> => this.get(this.entityUrl);\n\n      /**\n     * This method retrieves a user by their ID\n     * @returns promise\n     */\n       public getUserById = async (id:string): Promise<any> => this.get(this.entityUrl, id);\n\n    /**\n     * This method creates a new user\n     * @returns promise\n     */\n    public createUser = async (user: IUser): Promise<any> => this.post(this.entityUrl, user);\n\n      /**\n     * This method updates an existing user\n     * @returns promise\n     */\n       public updateUser = async (user: IUser): Promise<any> => this.put(`${this.entityUrl}/${user.id}`, user);\n\n    /**\n     * This method deletes a user\n     * @returns promise\n     */\n    public deleteUser = async (user: IUser): Promise<any> => this.del(`${this.entityUrl}/${user.id}`);\n}\n\nexport default new UserService();\n","import { IUser } from \"../../interfaces/userInterface\";\nimport { SortTypes } from \"../../utils/enums\";\nimport * as actionTypes from \"../actionTypes/userActionTypes\";\n\nexport const setUsers = (users:IUser[]) => ({\n    type: actionTypes.SET_USERS,\n    payload:users,\n  });\n\nexport const addUser = (user:IUser) => ({\n    type: actionTypes.ADD_USER,\n    payload:user,\n  });\n\n  export const updateUser = (user:IUser) => ({\n    type: actionTypes.UPDATE_USER,\n    payload:user,\n  });\n\nexport const removeUser = (user:IUser) => ({\n    type: actionTypes.REMOVE_USER,\n    payload:user,\n});\n\nexport const sortUsers = (sortType:SortTypes.SORT_DESC | SortTypes.SORT_ASC, column='username') => ({\n    type: sortType,\n    payload:column,\n});\n\n"],"names":["initialValues","name","email","username","city","createUserSchema","yup","shape","required","connect","state","userProps","user","props","navigate","useNavigate","dispatch","useDispatch","users","useState","fetching","processing","loaders","setLoaders","addUserForm","setAddUserForm","handleFormChange","event","target","value","submitCreateForm","newUser","lastUser","length","id","toString","userService","addUser","console","error","err","className","validationSchema","onSubmit","errors","touched","handleChange","handleBlur","handleSubmit","values","noValidate","htmlFor","onBlur","onChange","type","onClick","utils","disabled","env","process","development","apiBaseUrl","production","test","trim","response","data","message","statusCode","ApiError","ApiHandlerService","environment","get","url","path","axios","then","catch","errrorHandler","post","put","patch","del","UserService","entityUrl","getAllUsers","getUserById","createUser","updateUser","deleteUser","setUsers","actionTypes","payload","removeUser","sortUsers","sortType","column"],"sourceRoot":""}