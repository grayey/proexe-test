{"version":3,"file":"static/js/916.9bd4757e.chunk.js","mappings":"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","sources":["app/views/user/editUser.tsx","environment/index.ts","utils/errorHandler.ts","services/apiHandlerService.ts","services/userService.ts","store/actions/userActions.ts"],"sourcesContent":["import React, { SyntheticEvent, useEffect, useState } from \"react\";\nimport { updateUser } from \"../../../store/actions/userActions\";\nimport { connect, useDispatch } from 'react-redux'\nimport { Dispatch } from \"redux\"\nimport { useNavigate } from \"react-router\";\nimport { useMatch } from \"react-router-dom\";\nimport userService from \"../../../services/userService\";\nimport { IUser } from \"../../../interfaces/userInterface\";\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\";\nimport * as utils from '../../../utils/formatters';\n\n\nconst updateUserSchema = yup.object().shape({\n    name: yup.string().required(\"Name is required\"),\n    username: yup.string().required(\"Username is required\"),\n    email: yup.string().email('Enter a valid email').required(\"Email is required\"),\n    city: yup.string().required(\"City is required\"),\n    });\n\n\n\nconst EditUser = (props:any) => {\n    const match = useMatch(\"users/:id\");\n    const navigate = useNavigate();\n    const { userProps } = props;\n    const { users } = userProps;\n    const dispatch:Dispatch<any> = useDispatch();\n\n    const [loaders, setLoaders] = useState({\n        fetching:false,\n        processing:false\n    });\n    const [editUserForm, setEditUserForm] = useState({\n        name:'',\n        email:'',\n        username:'',\n        city:''\n    });\n    useEffect(() =>{\n        getUserById();\n    },[])\n\n\n    const getUserById = async() =>{\n        const id = match?.params.id || '';\n        let userList:IUser[] = [];\n        try{ \n            if(!users.length){ // the app was reloaded onto the edit page\n                const usersResponse = await userService.getUserById(id);\n                usersResponse.city = usersResponse.address.city;\n               userList = [usersResponse];\n            }else{ \n                userList = users;\n            }\n        }finally{\n            const user = userList.find((user:IUser) => user.id?.toString() === id.toString());\n            if(user) return setEditUserForm(user);\n            throw new Error('Invalid ID');\n        }\n    }\n\n    /**\n     * this method handles form changes\n     * @param event \n     */\n    const handleFormChange = (event:any) =>{\n        const { name, value } = event.target;\n        setEditUserForm({\n            ...editUserForm,\n            [name]:value\n        });\n    }\n\n    const submitUpdateForm = async() =>{\n        setLoaders({\n            ...loaders,\n            processing:true\n        });\n        const { email, name, username, city} = editUserForm;\n        const user:IUser = {\n            id:match?.params.id,\n            email, city,\n            name, username\n        };\n        try{\n            await userService.updateUser(user)\n            dispatch(updateUser(user));\n            navigate('/users');\n        }catch(err){\n            console.error({ err });\n        }finally{\n            setLoaders({\n                ...loaders,\n                processing:false\n            });\n        }\n    }\n\n    return (\n        <>\n        <div className=\"card\">\n        <Formik\n                    initialValues={editUserForm}\n                    enableReinitialize\n                    validationSchema={updateUserSchema}\n                    onSubmit={submitUpdateForm}\n                    >\n                    {({\n                        errors,\n                        touched,\n                        handleChange,\n                        handleSubmit,\n                        handleBlur,\n                        values\n                    }) => {\n    \n                        return (\n        <form className='needs-validation' onSubmit={handleSubmit} noValidate>\n            <div className=\"card-header\">\n                <b>Edit user form</b>\n            </div>\n            <div className=\"card-body\">\n                <div className=\"row gy-4 row-cols-1\">\n                    <div className=\"col\">\n\n                    <label htmlFor=\"editName\">\n                        Name<span className='text-danger'>*</span>\n                    </label>\n\n                    <input id=\"editName\" \n                        onBlur={handleBlur}\n                        onChange={(event)=>{\n                            handleFormChange(event);\n                            handleChange(event);\n                        }} type=\"text\" name=\"name\" value={values.name} className={`form-control ${touched.name && errors.name && 'has-error'}`} />\n                        \n                        <small className='text-danger'>\n                        {touched.name && errors.name}\n                        </small>\n                    </div>\n                    <div className=\"col\">\n    \n                    <label htmlFor=\"editUsername\">\n                        Username<span className='text-danger'>*</span>\n                    </label>\n                    <input id='editUsername' type=\"text\"\n                        onBlur={handleBlur}\n                        \n                        onChange={(event)=>{\n                            handleFormChange(event);\n                            handleChange(event);\n                        }} name=\"username\" value={values.username} className={`form-control ${touched.username && errors.username && 'has-error'}`} />\n                  <small className='text-danger'>\n                        {touched.username && errors.username}\n                        </small>\n                    </div>\n                    <div className=\"col\">\n            \n                    <label htmlFor=\"editEmail\">\n                        Email<span className='text-danger'>*</span>\n                    </label>\n                    <input id='editEmail' type=\"text\" \n                        onBlur={handleBlur}\n                        onChange={(event)=>{\n                            handleFormChange(event);\n                            handleChange(event);\n                        }} name=\"email\" value={values.email} className={`form-control ${touched.email && errors.email && 'has-error'}`} />\n                  <small className='text-danger'>\n                        {touched.email && errors.email}\n                        </small>\n\n                    </div>\n                    <div className=\"col\">\n             \n                    <label htmlFor=\"editCity\">\n                        City<span className='text-danger'>*</span>\n                    </label>\n                    <input id='editCity' type=\"text\"\n                        onBlur={handleBlur}\n                        \n                        onChange={(event)=>{\n                            handleFormChange(event);\n                            handleChange(event);\n                        }} name=\"city\" value={values.city} className={`form-control ${touched.city && errors.city && 'has-error'}`} />\n                 <small className='text-danger'>\n                        {touched.city && errors.city}\n                        </small>\n                    </div>\n                </div>\n            </div>\n            <div className=\"card-footer\">\n                <div className='float-end'>\n                <button className='btn btn-outline-danger m-2' onClick={()=> navigate('/users')}>Cancel</button>\n                <button className={`btn btn-${'primary'}`} type='submit'  disabled={loaders.processing} \n                >\n    \n                    Submit\n                    {\n                        loaders.processing && (\n                            <i className=\"spinner\"></i>\n                        )\n                    }\n                </button>\n                </div>\n         \n            </div>\n            </form>\n              );\n            }}\n            </Formik>\n        </div>\n        </>\n    )\n}\n\n\nconst mapStateToProps = (state:any) => {\n    const { user } = state\n      return {\n          userProps:user\n      }\n  }\n  \n  \n  \n  export default connect(mapStateToProps)(EditUser)","import { IEnvironment } from '../interfaces/environmentInterface';\nimport { EnvironmentTypes } from '../utils/enums';\n\ntype Development = EnvironmentTypes.development;\ntype Test = EnvironmentTypes.test;\ntype Production = EnvironmentTypes.production;\n\nconst env: any = process.env.NODE_ENV;\n\nconst mode: Development | Test | Production = env ? env.trim() : EnvironmentTypes.development;\nconst environment: IEnvironment = {\n    development: {\n        apiBaseUrl: 'https://my-json-server.typicode.com/karolkproexe/jsonplaceholderdb',\n    },\n    production: {\n        apiBaseUrl: 'https://my-json-server.typicode.com/karolkproexe/jsonplaceholderdb',\n    },\n    test: {\n        apiBaseUrl: 'https://my-json-server.typicode.com/karolkproexe/jsonplaceholderdb',\n    },\n};\n\nexport default environment[mode];\n","import { ApiError } from './enums';\n\nconst errrorHandler = (err: any): any => {\n    let { response } = err;\n    if (!response) {\n        response = {\n            data: {\n                message: 'Server unvailable, please try again.',\n                statusCode: ApiError.serverUnavailable,\n            },\n        };\n    }\n    if (response.data && response.data.error) {\n        response.data.message = response.data.error;\n    }\n    return response;\n};\n\nexport default errrorHandler;\n","import axios, { AxiosError, AxiosResponse } from 'axios';\nimport environment from '../environment';\nimport { IApiHandler } from '../interfaces/apiInterface';\nimport errrorHandler from '../utils/errorHandler';\n\nexport default class ApiHandlerService implements IApiHandler {\n    private apiBaseUrl: string = environment.apiBaseUrl;\n\n    /**\n     * This method retrieves records\n     * @param url\n     * @param id\n     * @returns\n     */\n    public get = async (url: string, id?:string): Promise<any> => {\n        let path = `${this.apiBaseUrl}/${url}`;\n        path = !id ? path : `${path}/${id}`;\n        return axios\n            .get(path)\n            .then((response: AxiosResponse) => response.data)\n            .catch((error: AxiosError) => {\n                throw errrorHandler(error).data;\n            });\n    };\n\n    /**\n     * This method is mainly used to create a new record\n     * @param url\n     * @param data\n     * @returns\n     */\n    public post = async (url: string, data: object): Promise<any> => {\n        const path = `${this.apiBaseUrl}/${url}`;\n        return axios\n            .post(path, data)\n            .then((response: AxiosResponse) => response.data)\n            .catch((error: AxiosError) => {\n                throw errrorHandler(error).data;\n            });\n    };\n\n    /**\n     * This method is used to update a record\n     * @param url\n     * @param data\n     * @returns\n     */\n    public put = async (url: string, data?:any): Promise<any> => {\n        const path = `${this.apiBaseUrl}/${url}`;\n        return axios\n            .put(path, data)\n            .then((response: AxiosResponse) => response.data)\n            .catch((error: AxiosError) => {\n                throw errrorHandler(error).data;\n            });\n    };\n\n    /**\n     * This method is used for patch updates\n     * @param url\n     * @param data\n     * @returns\n     */\n    public patch = async (url: string, data = null): Promise<any> => {\n        const path = `${this.apiBaseUrl}/${url}`;\n        return axios\n            .patch(path, data)\n            .then((response: AxiosResponse) => response.data)\n            .catch((error: AxiosError) => {\n                throw errrorHandler(error).data;\n            });\n    };\n\n    /**\n     * This method is used to delete a record\n     * @param url\n     * @returns\n     */\n    public del = async (url: string): Promise<any> => {\n        const path = `${this.apiBaseUrl}/${url}`;\n        return axios\n            .delete(path)\n            .then((response: AxiosResponse) => response.data)\n            .catch((error: AxiosError) => {\n                throw errrorHandler(error).data;\n            });\n    };\n\n   \n}\n","import { IUser } from '../interfaces/userInterface';\nimport ApiHandlerService from './apiHandlerService';\n\nclass UserService extends ApiHandlerService {\n    private entityUrl = 'data';\n\n    /**\n     * This method returns a list of users\n     * @returns promise\n     */\n    public getAllUsers = async (): Promise<any> => this.get(this.entityUrl);\n\n      /**\n     * This method retrieves a user by their ID\n     * @returns promise\n     */\n       public getUserById = async (id:string): Promise<any> => this.get(this.entityUrl, id);\n\n    /**\n     * This method creates a new user\n     * @returns promise\n     */\n    public createUser = async (user: IUser): Promise<any> => this.post(this.entityUrl, user);\n\n      /**\n     * This method updates an existing user\n     * @returns promise\n     */\n       public updateUser = async (user: IUser): Promise<any> => this.put(`${this.entityUrl}/${user.id}`, user);\n\n    /**\n     * This method deletes a user\n     * @returns promise\n     */\n    public deleteUser = async (user: IUser): Promise<any> => this.del(`${this.entityUrl}/${user.id}`);\n}\n\nexport default new UserService();\n","import { IUser } from \"../../interfaces/userInterface\";\nimport { SortTypes } from \"../../utils/enums\";\nimport * as actionTypes from \"../actionTypes/userActionTypes\";\n\nexport const setUsers = (users:IUser[]) => ({\n    type: actionTypes.SET_USERS,\n    payload:users,\n  });\n\nexport const addUser = (user:IUser) => ({\n    type: actionTypes.ADD_USER,\n    payload:user,\n  });\n\n  export const updateUser = (user:IUser) => ({\n    type: actionTypes.UPDATE_USER,\n    payload:user,\n  });\n\nexport const removeUser = (user:IUser) => ({\n    type: actionTypes.REMOVE_USER,\n    payload:user,\n});\n\nexport const sortUsers = (sortType:SortTypes.SORT_DESC | SortTypes.SORT_ASC, column='username') => ({\n    type: sortType,\n    payload:column,\n});\n\n"],"names":["updateUserSchema","yup","shape","name","required","username","email","city","connect","state","userProps","user","props","match","useMatch","navigate","useNavigate","users","dispatch","useDispatch","useState","fetching","processing","loaders","setLoaders","editUserForm","setEditUserForm","useEffect","getUserById","id","params","userList","length","userService","usersResponse","address","find","toString","Error","handleFormChange","event","target","value","submitUpdateForm","updateUser","console","error","err","className","initialValues","enableReinitialize","validationSchema","onSubmit","errors","touched","handleChange","handleSubmit","handleBlur","values","noValidate","htmlFor","onBlur","onChange","type","onClick","disabled","env","process","development","apiBaseUrl","production","test","trim","response","data","message","statusCode","ApiError","ApiHandlerService","environment","get","url","path","axios","then","catch","errrorHandler","post","put","patch","del","UserService","entityUrl","getAllUsers","createUser","deleteUser","setUsers","actionTypes","payload","addUser","removeUser","sortUsers","sortType","column"],"sourceRoot":""}